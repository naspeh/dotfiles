#!/bin/zsh
function usage {
    echo "Usage: pkglist: [-c] [-p] [-v] [-n] [-m] "
    echo "  (c: clean; p: save packages v: verbose; n: only native; m: only foreign)"
    exit 2
}

function clean {
    if [[ ! -n $(pacman -Qdt) ]]; then
        echo "No orphans to remove."
    else
        sudo pacman -Rs $(pacman -Qdtq)
    fi
    exit 2
}

function build_repo {
    dbfile="local-$1.db.tar.gz"
    paccache -rvc . -k1
    ls *.pkg.tar.xz > current.txt
    if [ -f last.txt -a -f $dbfile ]; then
        files=$(comm -23 current.txt last.txt)
    else
        files=$(cat current.txt)
    fi
    repo-add $dbfile $(echo $files | tr '\n' ' ')
    mv -f current.txt last.txt
}

function save_packages {
    DIR=/arch/pacman
    pkglist -n > $DIR/main.txt
    pkglist -m > $DIR/abs.txt
    pacman -Q > $DIR/all.txt

    # Update cached repositories
    cd $DIR/abs
    build_repo abs

    cd $DIR/main
    rsync -av /var/cache/pacman/pkg/ ./
    build_repo main

    # Sync pacman local db
    sudo pacman --config=$DIR/pacman.conf -Sy
    exit 2
}

function list_packages {
    autoload colors; colors

    list=$(comm -23 <(pacman -Qeq$filter) <(pacman -Qgq base base-devel | sort))
    if [ $verbose ]; then
        expac -Q "$fg[blue]%n$reset_color: %d" $(echo $list)
    else
        echo $list
    fi
}

while getopts "cpvmn" opt; do
    case $opt in
        p) save_packages;;
        c) clean;;
        v) verbose=1;;
        n) filter="n";;
        m) filter="m";;
        ?) usage;;
    esac
done

list_packages
