#! /home/dotfiles/bin/env/bin/python
import argparse
import json
import subprocess
from pathlib import Path

from requests_oauthlib import OAuth2Session

OAUTH_URL_TOKEN = 'https://accounts.google.com/o/oauth2/token'
API_URL_BASE = 'https://www.googleapis.com/gmail/v1/users/me/'


class _Conf:
    def __init__(self):
        self.path = (Path(__file__).parent / 'gmail.json').resolve()

        with self.path.open('br') as f:
            self.data = json.loads(f.read().decode())

    def update(self, *args, **kwargs):
        self.data.update(*args, **kwargs)
        content = json.dumps(
            self.data, sort_keys=True, indent=4, separators=(',', ': ')
        )
        with self.path.open('bw') as f:
            f.write(content.encode())

    def error(self, msg):
        self.update(error_message=msg)

    def __call__(self, key, default=None):
        return self.data.get(key, default)

conf = _Conf()


def check():
    access_token = conf('google_response', {}).get('access_token')
    if not access_token:
        msg = 'Fill access_token in config'
        conf.error(msg)
        raise SystemExit('Fill access_token in config')

    cli = OAuth2Session(
        conf('google_id'),
        token={
            'access_token': access_token,
            'token_type': conf('google_response').get('token_type')
        },
        scope=['https://mail.google.com/'],
        auto_refresh_url=OAUTH_URL_TOKEN,
        token_updater=lambda t: conf.update(
            google_response=dict(conf('google_response'), access_token=t)
        )
    )
    res = cli.get(API_URL_BASE + 'messages', params={'q': 'is:unread'})
    if res.ok:
        conf.error(None)
        uids = [i['id'] for i in res.json().get('messages', [])]
        unread = conf('unread', [])
        if uids != unread:
            conf.update(unread=uids)
        if any(uid not in unread for uid in uids):
            subprocess.call(conf('cmd'), shell=True)
    else:
        conf.error('%r %r' % (res, res.reason))


if __name__ == '__main__':
    parser = argparse.ArgumentParser('gmail')
    parser.add_argument('-i', action='store_true', help='just info wo update')
    parser.add_argument('-e', action='store_true', help='last error message')
    args = parser.parse_args()
    if args.i:
        print(len(conf('unread')))
    elif args.e:
        print(conf('error_message'))
    else:
        check()
