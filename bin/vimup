#!/usr/bin/env python
import argparse
import os
import re
import subprocess


def rc(filename, dirbase, just_parse=False):
    with open(filename, 'br') as f:
        text = f.read().decode()
    bundles_re = r'" ?Bundle ({0})(?: ({0}))?'.format('[^ \n]*')
    bundles = re.findall(bundles_re, text)
    print('Found %i bundles:' % len(bundles))
    if just_parse:
        print('\n'.join([ ' * ' + i[0] for i in bundles]))
        return

    urls = [install(*i, dirbase=dirbase) for i in bundles]
    with open(os.path.join(dirbase, 'bundles.txt'), 'bw') as f:
        f.write(('\n'.join(urls)).encode())


def install(bundle, dirname, dirbase):
    dirbase = dirbase.rstrip('/')
    bundle, dirname = (s.strip('"\'') for s in (bundle, dirname))
    print(' * Process %r' % bundle)
    if '/' not in bundle:
        bundle = 'vim-scripts/%s' % bundle
    if not dirname:
        dirname = bundle.replace('/', '--')
    dirname = os.path.join(dirbase, dirname)
    url = 'https://github.com/%s' % bundle
    if os.path.exists(dirname):
        subprocess.call('git pull', cwd=dirname, shell=True)
    else:
        cmd = 'git clone --depth=1 %s.git %s' % (url, dirname)
        subprocess.call(cmd, shell=True)
    return url


def main(argv=None):
    parser = argparse.ArgumentParser('mail')
    cmds = parser.add_subparsers(help='commands')

    def cmd(name, **kw):
        p = cmds.add_parser(name, **kw)
        p.set_defaults(cmd=name)
        p.arg = lambda *a, **kw: p.add_argument(*a, **kw) and p
        p.exe = lambda f: p.set_defaults(exe=f) and p

        p.arg('-d', '--dirbase', default=os.path.expanduser('~/.vim/bundle'))
        return p

    cmd('install', aliases=['i'])\
        .arg('bundle')\
        .arg('dirname', nargs='?', default='')\
        .exe(lambda a: install(a.bundle, a.dirname, a.dirbase))

    cmd('rc', aliases=['r'])\
        .arg('-f', default=os.path.expanduser('~/.vimrc'))\
        .arg('-j', '--just-parse', action='store_true')\
        .exe(lambda a: rc(a.f, a.dirbase, a.just_parse))

    args = parser.parse_args(argv)
    if not hasattr(args, 'exe'):
        parser.print_usage()
    else:
        args.exe(args)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        raise SystemExit(1)
