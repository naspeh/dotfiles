#!/home/dotfiles/bin/env/bin/python
import argparse
import imaplib
import json
import subprocess
import time
from pathlib import Path

client = imaplib.IMAP4_SSL


class _Conf:
    def __init__(self):
        self.path = (Path(__file__).parent / 'gmail.json').resolve()

        with self.path.open('br') as f:
            self.data = json.loads(f.read().decode())

    def update(self, *args, **kwargs):
        self.data.update(*args, **kwargs)
        content = json.dumps(
            self.data, sort_keys=True, indent=4, separators=(',', ': ')
        )
        with self.path.open('bw') as f:
            f.write(content.encode())

    def error(self, msg):
        self.update(error_message=msg)

    def __call__(self, key, default=None):
        return self.data.get(key, default)

conf = _Conf()


def check():
    im = client('imap.gmail.com')
    cmd = 'echo "password"| dmenu -p "gmail" -nf black -nb black'
    pwd = subprocess.check_output(cmd, shell=True).decode().rstrip('\n')
    res = im.login(conf('email'), pwd)
    if res[0] != 'OK':
        conf.error(res)
        exit(1)

    im.select('INBOX', readonly=True)
    while True:
        res = im.uid('SEARCH', None, 'UNSEEN')
        if res[0] == 'OK':
            conf.error(None)
            uids = [int(i) for i in res[1][0].split()]
            unread = conf('unread', [])
            if uids != unread:
                conf.update(unread=uids)
            if any(uid not in unread for uid in uids):
                subprocess.call(conf('cmd'), shell=True)
        else:
            conf.error(res)

        time.sleep(conf('timeout', 60))

if __name__ == '__main__':
    parser = argparse.ArgumentParser('gmail')
    parser.add_argument('-i', action='store_true', help='just info wo update')
    parser.add_argument('-e', action='store_true', help='last error message')
    args = parser.parse_args()
    if args.i:
        if conf('error_message'):
            print('!')
        else:
            print(len(conf('unread')))
    elif args.e:
        print(conf('error_message'))
    else:
        try:
            check()
        except client.error as e:
            conf.error(str(e))
