#!/usr/bin/env python
import argparse
import datetime as dt
import os
import re
import socket
import subprocess
import sys

BDIR = '/arch/backup/'
RSYNC = 'sudo rsync -aAXHvh --stats --delete'
FILTERS = [
    '+ /boot/',
    '+ /etc/',
    '+ /root/',
    '+ /home/',
    '+ /home/naspeh/',
    '+ /home/naspeh/v/',
    '- /home/naspeh/v/*',
    '- /home/*/.thumbnails/',
    '- /home/*',
    '+ /arch/',
    '+ /arch/naspeh/',
    '+ /arch/nayavu/',
    '+ /arch/photo/',
    '+ /arch/pacman/',
    '- /arch/*',
    '- /**/.cache/',
    '- /*'
]
TARGETS = {
    'pad_to_box': 'backup copy box:/arch/backups/pad/ --nolog',
    'box_to_sea': (
        'backup copy /arch/ /media/sea/ --nolog --extra="'
        '   --exclude={/lost+found,/.delta,/backup}'
        '   --backup --backup-dir=/media/sea/.delta/'
        '"'
    )
}


def main():
    parser = argparse.ArgumentParser()
    cmds = parser.add_subparsers(title='commands')

    def cmd(name, **kw):
        s = cmds.add_parser(name, **kw)
        s.set_defaults(cmd=name)
        s.arg = lambda *a, **kw: s.add_argument(*a, **kw) and s

        s.arg('--log', action='store_true', help='log to file')
        s.arg('--nolog', action='store_true', help='don\'t log to file')
        s.arg('--bdir', default=BDIR, help='backup directory')
        s.arg_fake = lambda: (
            s.arg('-f', '--fake', action='store_true', help='dry run')
        )
        return s

    cmd('run', help='backup important data').arg_fake()

    cmd('tar', help='archive delta directory')\
        .arg('-l', '--label', help='label for archive')\
        .arg('-d', '--delete', help='delete delta directory')

    cmd('copy', help='copy backup directory').arg_fake()\
        .arg('src', default=BDIR, nargs='?', help='source path')\
        .arg('dest', help='destination path')\
        .arg('-e', '--extra', default='', help='extra options for rsync')

    cmd('full', help='backup whole root partition').arg_fake()

    cmd('call', help='call fixed action')\
        .arg('target', choices=TARGETS.keys(), help='choice fixed action')

    args = parser.parse_args(sys.argv[1:])
    if not hasattr(args, 'cmd'):
        parser.print_usage()
        exit(2)

    today = dt.date.today().isoformat()
    now = dt.datetime.now().strftime("%Y-%m-%d--%X")
    base_cmd = re.sub('[^\w]+', '-', ' '.join(sys.argv[1:]))
    if hasattr(args, 'fake'):
        rsync = RSYNC + ' --dry-run' if args.fake else RSYNC
    bdir = args.bdir.rstrip('/') + '/'
    log, mnt = bdir + 'log/', bdir + 'mnt/'
    for f in [log, mnt]:
        if not os.path.exists(f):
            os.mkdir(f)

    def sh(cmd, **kw):
        cmd = 'echo "{}" && time ({})'.format(cmd.replace('"', '\"'), cmd)
        if args.log or os.environ.get('BACKUP_LOG', False) and not args.nolog:
            file = '%s%s--%s.log' % (log, now, base_cmd)
            cmd = '({}; echo "{}") &>> {}'.format(cmd, '-' * 20, file)
        subprocess.call(cmd, shell=True, **kw)

    if args.cmd == 'run':
        sh('paclocal')

        filters = ' '.join(['--filter="%s"' % v for v in FILTERS])
        sh(
            ' '.join([rsync, filters, '--delete-excluded']) +
            ' --backup --backup-dir={dest}delta/'
            ' / {dest}latest/'
            .format(dest=bdir)
        )

    elif args.cmd == 'tar':
        name = today
        if args.label:
            name += '-' + args.label
        sh(
            'cd {dest} && tar -cvf {name}.tar --directory=delta .'
            .format(dest=bdir, name=name)
        )
        if args.delete:
            sh('rm -r {}delta'.format(bdir))

    elif args.cmd == 'copy':
        sh(
            rsync + ' -x {extra} {src} {dest}/'
            .format(src=args.src, dest=args.dest.rstrip('/'), extra=args.extra)
        )

    elif args.cmd == 'full':
        snap = '/dev/%s/snap' % socket.gethostname()
        root = '/dev/%s/root' % socket.gethostname()
        rsync += ' -x --exclude=/var/lib/docker/devicemapper --exclude=' + (
            '{/dev/*,/proc/*,/sys/*,/tmp/*,/run/*,/mnt/*,/media/*,/lost+found}'
        )
        try:
            sh(
                'lvcreate --size 10G --snapshot --name snap {root}'
                ' && mount {snap} {mnt}'
                ' && {rsync} {mnt} {dest}full/'
                .format(
                    dest=bdir, rsync=rsync,
                    root=root, snap=snap, mnt=mnt
                )
            )
        finally:
            sh(
                'umount {mnt}; lvremove -f {snap}'
                .format(mnt=mnt, snap=snap)
            )

    elif args.cmd == 'call':
        cmd_ = TARGETS.get(args.target)
        if args.target.startswith(socket.gethostname()):
            sh(cmd_)
        else:
            print(cmd_)
            raise SystemExit('...Wrong hostname for this target.')


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        exit('Closed.')
