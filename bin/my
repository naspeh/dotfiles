#!/bin/sh
set -xe

case "$1" in
lang)
    options="grp_led:caps,grp:alt_caps_toggle,grp:caps_switch"
    if [ "$(setxkbmap -print | grep -c us+ua)" == "1" ]; then
        setxkbmap -layout "us,ru" -option "$options"
    else
        setxkbmap -layout "us,ua" -option "$options"
    fi
;;
system)
    systemctl $(echo -e 'suspend\npoweroff\nreboot' | rofi -dmenu)
;;
monitor)
    if [ "$(hostnamectl hostname)" == "cat" ]; then
        laptop_cmd="xrandr --output eDP1 --auto --output DP2 --off"
        monitor_cmd="xrandr --output eDP1 --off --output DP2 --mode 2560x1440 --rate 74.99"
    else
        laptop_cmd="xrandr --output eDP --auto --output DisplayPort-1 --off"
        monitor_cmd="xrandr --output eDP --off --output DisplayPort-1 --auto "
    fi
    if [[ "$(xrandr| grep '.*mm x .*mm' | cut -d ' ' -f1)" == eDP* ]]; then
        $monitor_cmd
    else
        $laptop_cmd
    fi
;;
monitor-two)
    xrandr --output eDP --auto --below DisplayPort-1 --output DisplayPort-1 --auto --primary
;;
syncthing-uptime)
    if syncthing cli show system > /dev/null; then
        secs=$(syncthing cli show system | jq .uptime);
        printf '%dh\n' $((secs/3600))
    else
        echo "OFF"
    fi

;;
syncthing-status)
    status=""
    if syncthing cli show system > /dev/null; then
        backup=$(syncthing cli show connections | jq '.connections["LIB4LWB-DHYOCKY-L7JQ74D-P6ANQDE-RYDBEFI-3T6PMDS-HKTRHLB-4OTYVQQ"].connected')
        if "$backup" == "true"; then
            echo "OK"
            exit 0
        fi
    fi
    echo "OFF"
    exit 1
;;
prettyurl)
    python2 -c "import urllib; print(urllib.unquote('''$(xsel -o)'''));" | xsel -ib
;;
prettyjson)
    xsel -o | python3 -m json.tool --sort-keys | xsel -ib
;;
qrcode-copy)
    xsel -o > /tmp/qrcode.txt
    convert inline:/tmp/qrcode.txt /tmp/qrcode.png
    zbarimg /tmp/qrcode.png | xsel -ib
;;
qrcode-png)
    zbarimg /arch/downloads/qrcode.png | xsel -ib
;;
qrcode-svg)
    zbarimg /arch/downloads/qrcode.svg | xsel -ib
;;
backup-to-ext)
    rsync='rsync -aAXHvh --stats --delete --backup'
    $rsync --backup-dir=/mnt/backups/ryz.delta/ /arch/backup/ /mnt/backups/ryz/
    $rsync --backup-dir=/mnt/photo.delta/ /arch/photo/ /mnt/photo/
    $rsync --backup-dir=/mnt/sync.delta/ /arch/sync/ /mnt/sync/
;;
*)
    exit 1
esac
