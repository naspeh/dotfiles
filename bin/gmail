#!/usr/bin/env python
import argparse
import imaplib
import json
import subprocess
from pathlib import Path

import requests

OAUTH_URL_TOKEN = 'https://accounts.google.com/o/oauth2/token'


class _Conf:
    def __init__(self):
        base = Path(__file__).resolve().parent.parent
        self.path = base / 'var' / 'gmail.json'

        with self.path.open('br') as f:
            self.data = json.loads(f.read().decode())

    def update(self, *args, **kwargs):
        self.data.update(*args, **kwargs)
        content = json.dumps(
            self.data, sort_keys=True, indent=4, separators=(',', ': ')
        )
        with self.path.open('bw') as f:
            f.write(content.encode())

    def error(self, msg):
        self.update(error_message=msg)

    def __call__(self, key, default=None):
        return self.data.get(key, default)

conf = _Conf()
client = imaplib.IMAP4_SSL


class AuthError(Exception):
    pass


def auth_refresh():
    refresh_token = conf('google_response', {}).get('refresh_token')
    if not refresh_token:
        raise AuthError('refresh_token is empty')

    res = requests.post(OAUTH_URL_TOKEN, data={
        'client_id': conf('google_id'),
        'client_secret': conf('google_secret'),
        'refresh_token': refresh_token,
        'grant_type': 'refresh_token',
    })
    if res.ok:
        new = dict(conf('google_response'), **json.loads(res.text))
        conf.update(google_response=new)
        return
    raise AuthError('%s: %s' % (res.reason, res.text))


def login(im, retry=False):
    access_token = conf('google_response', {}).get('access_token')
    try:
        im.authenticate('XOAUTH2', lambda x: (
            'user=%s\1auth=Bearer %s\1\1'
            % (conf('email'), access_token)
        ))
    except im.error as e:
        if retry:
            raise AuthError(e)

        auth_refresh()
        login(im, True)


def check():
    try:
        im = client('imap.gmail.com')
        login(im)

    except (IOError, AuthError) as e:
        conf.error(str(e))
        print(e)
        exit(1)
    else:
        uids = []
        for box in conf('boxes', ['INBOX']):
            im.select('"%s"' % box, readonly=True)
            res = im.uid('SEARCH', None, 'UNSEEN')
            if res[0] == 'OK':
                conf.error(None)
                uids += [int(i) for i in res[1][0].split()]
            else:
                conf.error(res)

        unread = conf('unread', [])
        if uids != unread:
            conf.update(unread=uids)
        if any(uid not in unread for uid in uids):
            subprocess.call(conf('cmd'), shell=True)


if __name__ == '__main__':
    parser = argparse.ArgumentParser('gmail')
    parser.add_argument('-i', action='store_true', help='just info wo update')
    parser.add_argument('-e', action='store_true', help='last error message')
    args = parser.parse_args()
    if args.i:
        if conf('error_message'):
            print('!')
        else:
            print(len(conf('unread')))
    elif args.e:
        print(conf('error_message'))
    else:
        check()
