" vim:ft=vim
set nocompatible
let mapleader=","

" ------------------------------
" Functions
" ------------------------------
fun! MapDo(key, cmd)
    execute "nmap ".a:key." " . a:cmd
    execute "cmap ".a:key." " . "<C-C>".a:cmd
    execute "imap ".a:key." " . "<Esc>".a:cmd
    execute "vmap ".a:key." " . "<Esc>".a:cmd."gv"
endfun

fun! MapToggle(key, opt)
    call MapDo(a:key, "set ".a:opt."! ".a:opt."?")
endfun

fun! VarToggle(name, ...)
    if a:0 >= 1
        let v1=a:1
    else
        let v1=0
    endif
    if a:0 >= 2
        let v2=a:2
    else
        let v2=1
    endif
    if eval(a:name) == v1
        execute 'let '.a:name.'="'.v2.'"'
    else
        execute 'let '.a:name.'="'.v1.'"'
    endif
    echo 'let '.a:name.'="'.eval(a:name).'"'
endfun

fun! TextWidth()
    " highlight column 80
    if v:version >= 703
        setlocal colorcolumn=80
    else
        highlight OverLength ctermbg=grey ctermfg=black guibg=#eeeeff
        match OverLength /\%80v.\+/
    endif
endfun
call MapDo('<F11>', ':call TextWidth()<cr>')
autocmd FileType python call TextWidth()

fun! TrimSpaces()
  if !&binary && &filetype != 'diff'
    normal mz
    normal Hmy
    %s/\s\+$//e
    normal 'yz<CR>
    normal `z
  endif
endfun
call MapDo('<F9>', ':call TrimSpaces()<cr>')

fun! TextMode()
    setlocal textwidth=90
    setlocal formatoptions=aw2tql
    setlocal nonumber
    "setlocal nolist
    "setlocal wrap
    "setlocal nocursorline
    setlocal spell
    setlocal whichwrap+=<,>,[,]
    "NeoCompleteDisable
endfun
nmap <leader>tt :call TextMode()<cr>
nmap <leader>ta :setlocal formatoptions-=l<cr>:call TextMode()<cr>

" ------------------------------
" Plugins activate
" ------------------------------
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'


Bundle 'xterm16.vim'
let xterm16_colormap='softlight'
let xterm16_brightness='high'
color xterm16


Bundle 'scrooloose/nerdtree'
call MapDo('<leader>f', ':NERDTreeToggle<cr>')
let NERDTreeWinSize=35
let NERDTreeChDirMode=2
let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.pyc$']


Bundle 'kien/ctrlp.vim'
call MapDo('<F3>', ':CtrlPBuffer<cr>')
call MapDo('<F4>', ':CtrlPCurWD<cr>')
call MapDo('<F5>', ':CtrlPBufTag<cr>')
let g:ctrlp_custom_ignore={
    \'dir':  '\.git$\|\.hg$\|\.svn$\|__pycache__$',
\}
"let g:ctrlp_extensions=['tag', 'quickfix', 'dir']
let g:ctrlp_working_path_mode=0
let g:ctrlp_mruf_relative=1


Bundle 'scrooloose/syntastic'
let g:syntastic_check_on_open=0
let g:syntastic_enable_signs=0
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_enable_balloons=1
let g:syntastic_enable_highlighting=0
let g:syntastic_always_populate_loc_list=1
let g:syntastic_auto_loc_list=2
let g:syntastic_loc_list_height=2
let g:syntastic_stl_format = '[%E{Err: #%e}%B{, }%W{Warn: #%w}]'
call MapDo('<F8>', ':SyntasticCheck<cr>:Errors<cr>')
nmap <leader>ss :call VarToggle('g:syntastic_auto_loc_list', 1, 2)<cr>


Bundle 'milkypostman/vim-togglelist'
"The default mappings are:
"nmap <leader>l :call ToggleLocationList()<CR>
"nmap <leader>q :call ToggleQuickfixList()<CR>


Bundle 'majutsushi/tagbar'
call MapDo('<leader>b', ':TagbarToggle<cr>')
let g:tagbar_autofocus=1
let g:tagbar_sort=1
let g:tagbar_foldlevel=0


Bundle 'grep.vim'
let Grep_Skip_Dirs_='.git .hg __pycache__'
let Grep_Skip_Dirs=Grep_Skip_Dirs_
let Grep_Skip_Files='*.pyc'
noremap <leader>gg :call VarToggle(
    \'g:Grep_Skip_Dirs', Grep_Skip_Dirs_, Grep_Skip_Dirs_.' migrations'
\)<cr>


Bundle 'scrooloose/nerdcommenter'
let NERDCreateDefaultMappings=0
nnoremap <leader>c :call NERDComment('n', 'AlignLeft')<cr>
vnoremap <leader>c :call NERDComment('x', 'AlignLeft')<cr>gv
nnoremap <leader>cc :call NERDComment('n', 'Uncomment')<cr>
vnoremap <leader>cc :call NERDComment('x', 'Uncomment')<cr>gv


let g:jedi#force_py_version=3
Bundle 'davidhalter/jedi-vim'
let g:jedi#auto_initialization=1
let g:jedi#auto_vim_configuration=1
let g:jedi#use_tabs_not_buffers=0
let g:jedi#rename_command=0
let g:jedi#popup_on_dot=1
let g:jedi#popup_select_first=0
let g:jedi#show_call_signatures=0
let g:jedi#goto_definitions_command="<leader>d"
let g:jedi#goto_assignments_command="<leader>g"
let g:jedi#documentation_command="<leader>o"
let g:jedi#usages_command="<leader>u"
let g:jedi#completions_command="<C-g>"
nmap <leader>pp :call jedi#force_py_version_switch()<cr>


Bundle 'hdima/python-syntax'
let python_highlight_all=1


Bundle 'mitsuhiko/vim-jinja'
let g:htmljinja_disable_detection=0


Bundle 'maksimr/vim-jsbeautify'
Bundle 'tpope/vim-fugitive'
Bundle 'powerman/vim-plugin-ruscmd'
Bundle 'gregsexton/MatchTag'


" ------------------------------
" Configure
" ------------------------------

" set window title
set title
set nobackup
set noswapfile

set hidden
set undolevels=500
set history=500

" Localization
set langmenu=none " Always use english menu
set spelllang=en_us,ru_yo
set encoding=utf-8
set fileencodings=utf-8,cp1251,koi8-r,cp866
set termencoding=utf-8

"undo settings
set undodir=~/.vim/undofiles
set undofile

set smartcase
set hlsearch
set incsearch

syntax on
set number
set ruler
set colorcolumn=+1 "mark the ideal max text width

set list
set listchars=tab:▸\ ,trail:·,extends:❯,precedes:❮
set linebreak

set expandtab
set shiftwidth=4
set softtabstop=4
set tabstop=4

set autoindent
set smarttab

set wildmenu
set wildmode=longest,full
set wildignore+=*.pyc,__pycache__

" Base from https://github.com/scrooloose/vimfiles
set statusline =%#identifier#[%f]%* "filename
set statusline+=%#warningmsg#%{&ff!='unix'?'['.&ff.']':''}%* "warn not unix
set statusline+=%#warningmsg#%{(&fenc!='utf-8'&&&fenc!='')?'['.&fenc.']':''}%* "warn not utf8
set statusline+=%h                  "help file flag
set statusline+=%y                  "filetype
set statusline+=%#identifier#%r%*   "read only flag
set statusline+=%#warningmsg#%m%*   "modified flag
set statusline+=%{fugitive#statusline()}
set statusline+=%#warningmsg#%{SyntasticStatuslineFlag()}%*
set statusline+=%#error#%{&paste?'[paste]':''}%* " warn paste
set statusline+=%=                  "left/right separator
set statusline+=%c,                 "cursor column
set statusline+=%l/%L               "cursor line/total lines
set statusline+=\ %P                "percent through file
set laststatus=2

set showcmd
set showmode
set cmdheight=2
set confirm
set report=0

set mouse=r
set mousemodel=popup
set mousehide
imap <S-Insert> <MiddleMouse>

" share clipboard with system clipboard
set clipboard=unnamedplus

"GVIM
if has('gui')
    set guioptions-=T   "disable panel
    set guioptions+=c   "disable dailogs
    "set guioptions-=e   "disable tabs
    "set guioptions-=m   "remove menubar

    " Disable scrollbars
    set guioptions+=LlRrb
    set guioptions-=LlRrb

    set guifont=monospace\ 8
endif

" http://blog.sanctum.geek.nz/vim-annoyances/
nnoremap <F1> <nop>
nnoremap Q <nop>
set shortmess+=I

" Don't make chaos on my display
set nowrap
set backspace=indent,eol,start
set nojoinspaces
set nofoldenable

filetype on            " enables filetype detection
filetype plugin on     " enables filetype specific plugins
"filetype plugin indent on

autocmd BufNewFile,BufRead *.{css,less} setlocal ft=css
autocmd BufNewFile,BufRead *.{md,mdt} setlocal ft=markdown
autocmd BufNewFile,BufRead *.tpl setlocal ft=htmljinja
autocmd BufNewFile,BufRead *.js.inc setlocal ft=javascript
autocmd BufNewFile,BufRead *.css.inc setlocal ft=css

autocmd Syntax javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd Syntax css set omnifunc=csscomplete#CompleteCSS
autocmd Syntax html set omnifunc=htmlcomplete#CompleteTags
autocmd Syntax xml set omnifunc=xmlcomplete#CompleteTags

" Highlight insert mode
autocmd InsertEnter * set cursorline
autocmd InsertLeave * set nocursorline

set autoread
autocmd BufWinEnter,WinEnter,InsertEnter,InsertLeave * checktime
autocmd FileChangedShell * echo "Warning: File changed on disk"

" Sudo saves the file
command! Sw w !sudo tee % > /dev/null

" Indent blocks
vmap < <gv
vmap > >gv

" Nice scrolling if line wrap
noremap j gj
noremap k gk
noremap <Down> gj
noremap <Up> gk

nmap <leader>h :setlocal hlsearch! hlsearch?<cr>
nmap <leader>m :setlocal modifiable! modifiable?<cr>
nmap <leader>p :setlocal paste! paste?<cr>
nmap <leader>w :setlocal wrap! wrap?<cr>
nmap <leader>s :setlocal spell! spell?<cr>

nmap <leader>z :set winwidth=9999<cr>
nmap <leader>zz :set winwidth=1<cr><C-W>=

nmap <leader>2t :setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2<cr>
nmap <leader>r :source ~/.vimrc<cr>
nmap <leader>a ggVG<cr>
nmap <leader>n :lnext<cr>
nmap <leader>nn :lfirst<cr>

nmap <F2> :let @/ = '\<'.expand('<cword>').'\>'\|set hlsearch<C-M>

" <Nul> is <C-Space> in terminal
imap <Nul> <C-x><C-o>
imap <C-f> <C-x><C-f>

" ------------------------------
" Misc
" ------------------------------
iab pybin #!/usr/bin/env python<esc>
iab pyutf # -*- coding: utf-8 -*-<esc>
iab pdb; import pdb; pdb.set_trace()<esc>
iab ipdb; import ipdb; ipdb.set_trace()<esc>
iab bpdb; import bpdb; bpdb.set_trace()<esc>
iab pprint; import pprint as _; _.pprint(

set secure  " must be written at the last.  see :help 'secure'.
