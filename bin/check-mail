#!/usr/bin/env python
"""
Config example
{
    "server": "demo.pusto.org",
    "username": "demo",
    "password": "demo",
    "query": "unseen keyword #inbox",
}
"""
import argparse
import imaplib
import json
import logging
import threading


log = logging.getLogger('idle-mail')
logging.basicConfig(level=logging.DEBUG)


def connect(conf):
    imaplib.IMAP4.debug = 4
    con = imaplib.IMAP4_SSL(conf['server'])
    con.login(conf['username'], conf['password'])
    con.select()
    return con


def fetch_unread(conf):
    con = connect(conf)
    typ, res = con.uid('SEARCH', conf.get('query', 'UNSEEN'))
    if typ == 'OK':
        unread = res[0].decode().split()
        return sorted(unread)
    raise ValueError(typ, res)


def run_fetch(conf, args):
    unread = fetch_unread(conf)
    print(len(unread))


def idle(conf):
    con = connect(conf)
    tag = con._new_tag()
    con.send(b'%s IDLE\r\n' % tag)
    res = con.readline()
    if res != b'+ idling\r\n':
        raise SystemExit('No IDLE?: %s' % res)

    log.info('Started for %s' % conf['username'])
    unread = fetch_unread(conf)
    log.debug('Current unread uids: %s', unread)
    while 1:
        res = con.readline()
        if not res or res == b'* OK Still here\r\n':
            continue
        log.debug('Got: %s' % res.decode().strip())
        new_unread = fetch_unread(conf)
        log.debug('New unread uids: %s', new_unread)
        if unread != new_unread:
            break


def run_idle(conf, args):
    t = threading.Thread(target=idle, args=(conf,), daemon=True)
    t.start()
    t.join(args.timeout)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--conf', '-c', help='path to config')
    subs = parser.add_subparsers()

    idle = subs.add_parser('idle')
    idle.add_argument('-t', '--timeout', default=300, type=float)
    idle.set_defaults(func=run_idle)

    fetch = subs.add_parser('fetch')
    fetch.set_defaults(func=run_fetch)

    args = parser.parse_args()
    with open(args.conf, 'br') as f:
        conf = json.loads(f.read().decode())

    if not hasattr(args, 'func'):
        parser.print_usage()
        return

    args.func(conf, args)


if __name__ == '__main__':
    main()
