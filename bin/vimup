#!/usr/bin/env python
import argparse
import functools
import json
import os
import re
import shutil
import subprocess

import requests


dirbase = rcfile = None
get_url = lambda n: 'https://github.com/%s' % n
pretty_json = functools.partial(
    json.dumps, sort_keys=True, indent=4, separators=(',', ': ')
)


def get_bundle(bundle, dirname):
    bundle, dirname = (s.strip('"\'') for s in (bundle, dirname))
    if '/' not in bundle:
        bundle = 'vim-scripts/%s' % bundle
    if not dirname:
        dirname = bundle.replace('/', '--')
    return bundle, dirname


def parse_rc():
    global rcfile

    with open(rcfile, 'br') as f:
        text = f.read().decode()
    bundles_re = r'" ?Bundle ({0})(?: ({0}))?'.format('[^ \n]*')
    bundles = [get_bundle(*i) for i in re.findall(bundles_re, text)]
    print('Found %i bundles in %s' % (len(bundles), rcfile))
    return bundles


def clean():
    global dirbase
    dirs = [i[1] for i in parse_rc()]
    for name in os.listdir(dirbase):
        path = os.path.join(dirbase, name)
        if name not in dirs and os.path.isdir(path):
            print('Remove %r' % path)
            shutil.rmtree(path)


def install(bundle, dirname):
    global dirbase
    bundles = [(bundle, dirname)] if bundle else parse_rc()
    for bundle, dirname in bundles:
        bundle, dirname = get_bundle(bundle, dirname)

        print('Process %r' % bundle)
        dirname = os.path.join(dirbase, dirname)
        if os.path.exists(os.path.join(dirname, '.git')):
            subprocess.call('git pull', cwd=dirname, shell=True)
        else:
            cmd = 'git clone --depth=1 %s.git %s' % (get_url(bundle), dirname)
            subprocess.call(cmd, shell=True)
        print('---')


def get_info(bundles):
    save = False if bundles else True
    bundles = [get_bundle(i, '') for i in bundles] if bundles else parse_rc()

    forbidden, info = False, {}
    for name, _ in sorted(bundles):
        if not forbidden:
            res = requests.get('https://api.github.com/repos/' + name)
            if res.ok:
                info[name] = {
                    k: v for k, v in res.json().items()
                    if k in ('description', 'html_url', 'homepage', 'watchers')
                }
            else:
                forbidden = True
                print('Can\'t get info from github: %r %r' % (res, res.reason))

        print('%s: %s' % (name, pretty_json(info.get(name, get_url(name)))))

    if save and info:
        with open(os.path.join(dirbase, 'bundles.txt'), 'bw') as f:
            f.write(pretty_json(info).encode())


def main(argv=None):
    global dirbase, rcfile

    parser = argparse.ArgumentParser('mail')
    cmds = parser.add_subparsers(help='commands')

    def cmd(name, **kw):
        p = cmds.add_parser(name, **kw)
        p.set_defaults(cmd=name)
        p.arg = lambda *a, **kw: p.add_argument(*a, **kw) and p
        p.exe = lambda f: p.set_defaults(exe=f) and p

        p.arg('-d', '--dirbase', default=os.path.expanduser('~/.vim/bundle'))
        p.arg('-r', '--rcfile', default=os.path.expanduser('~/.vimrc'))
        return p

    cmd('install', aliases=['i'])\
        .arg('bundle', nargs='?', default='')\
        .arg('dirname', nargs='?', default='')\
        .exe(lambda a: install(a.bundle, a.dirname))

    cmd('clean', aliases=['c'])\
        .exe(lambda a: clean())

    cmd('show', aliases=['s'])\
        .arg('bundles', nargs='*', default=[])\
        .exe(lambda a: get_info(a.bundles))

    args = parser.parse_args(argv)
    dirbase, rcfile = args.dirbase.rstrip('/'), args.rcfile
    if not hasattr(args, 'exe'):
        parser.print_usage()
    else:
        args.exe(args)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        raise SystemExit(1)
