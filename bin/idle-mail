#!/usr/bin/env python
"""
Config example
{
    "server": "demo.pusto.org",
    "username": "demo",
    "password": "demo",
    "query": "unseen keyword #inbox",
    "cmd_upd": "cat > ~/d/var/mailur.unread; pkill -RTMIN+2 i3blocks",
    "cmd_new": "aplay -q ~/d/var/msg.wav"
}
"""
import argparse
import imaplib
import json
import logging
import subprocess
import threading


log = logging.getLogger('idle-mail')
logging.basicConfig(level=logging.DEBUG)
current = 0


def connect(conf):
    con = imaplib.IMAP4_SSL(conf['server'])
    con.login(conf['username'], conf['password'])
    con.select()
    return con


def fetch_unread(conf):
    global unread
    con = connect(conf)
    typ, res = con.uid('SEARCH', conf.get('query', 'UNSEEN'))
    if typ == 'OK':
        unread = res[0].decode().split()
        subprocess.run(conf['cmd_upd'], input=b'%i' % len(unread), shell=True)
        return unread
    raise ValueError(typ, res)


def idle(conf, num):
    global current

    con = connect(conf)
    tag = con._new_tag()
    con.send(b'%s IDLE\r\n' % tag)
    res = con.readline()
    if res != b'+ idling\r\n':
        raise SystemExit('No IDLE?: %s' % res)

    unread = set()
    log.info('Started for %s' % conf['username'])
    while 1:
        res = con.readline()
        if current != num:
            return
        if not res or res == b'* OK Still here\r\n':
            continue
        log.debug('Got: %s' % res.decode().strip())
        msg = res.decode().split()[2]
        new_unread = set(fetch_unread(conf))
        log.debug('%s: %s - %s', msg, new_unread, unread)
        if msg == 'EXISTS' and new_unread - unread:
            subprocess.call(conf['cmd_new'], shell=True)
        unread = new_unread


def main():
    global current

    parser = argparse.ArgumentParser()
    parser.add_argument('conf', help='path to config')
    parser.add_argument('-t', '--timeout', type=float)
    args = parser.parse_args()
    with open(args.conf, 'br') as f:
        conf = json.loads(f.read().decode())

    while 1:
        current += 1
        fetch_unread(conf)

        t = threading.Thread(target=idle, args=(conf, current), daemon=True)
        t.start()
        t.join(args.timeout)


if __name__ == '__main__':
    main()
